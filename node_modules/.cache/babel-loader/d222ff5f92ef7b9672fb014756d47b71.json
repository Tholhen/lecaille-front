{"ast":null,"code":"var _jsxFileName = \"/Users/nicolas/Documents/Travail/Web Developper/3W Academy/Projet/site/lecaille-front/src/components/loginPopUp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { loginUser } from \"../api/user\";\nimport tokenConfig from \"../tokenConfig\";\nimport { config } from \"../config\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginPopUp = props => {\n  _s();\n\n  //Définition des variables\n  const [email, setEmail] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [emailErrorText, setEmailErrorText] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(false);\n  const [passwordErrorText, setPasswordErrorText] = useState(\"\");\n\n  const globalVerify = () => {\n    if (!email) {\n      setEmailError(true);\n      setEmailErrorText(\"Adresse email non renseignée\");\n    } else {\n      if (!email.match(config.emailRegEx)) {\n        setEmailError(true);\n        setEmailErrorText(\"Format d'email non valide\");\n      } else {\n        setEmailError(false);\n        setEmailErrorText(\"\");\n      }\n    }\n\n    if (!password) {\n      setPasswordError(true);\n      setPasswordErrorText(\"Mot de passe non reseigné\");\n    } else {\n      setPasswordError(false);\n      setPasswordErrorText(\"\");\n    }\n\n    if (email.match(config.emailRegEx)) {\n      let datas = {\n        email: email,\n        password: password\n      };\n      loginUser(datas).then(response => {\n        if (response.data.status === 404) {\n          setEmailErrorText(\"Utilisateur inexistant\");\n          setEmailError(true);\n        } else {\n          setEmailErrorText(\"\");\n          setEmailError(false);\n\n          if (response.data.status === 401) {\n            setPasswordErrorText(\"Mot de passe incorrect\");\n            setPasswordError(true);\n          } else {\n            localStorage.setItem(tokenConfig.token.name, response.data.token);\n            props.closeLoginForm();\n          }\n        }\n      });\n    }\n  };\n\n  const onSubmit = () => {\n    globalVerify();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      open: props.opened,\n      onClose: e => {\n        props.closeLoginForm();\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Se connecter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"login-register-form\",\n          autoComplete: \"off\",\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            error: true,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"filled\",\n              label: \"Email\",\n              color: \"primary\",\n              className: \"register-form-input\",\n              required: true,\n              onChange: e => {\n                setEmail(e.target.value);\n              },\n              error: emailError,\n              type: \"email\",\n              value: email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: emailErrorText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            error: true,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              variant: \"filled\",\n              label: \"Mot de passe\",\n              color: \"primary\",\n              className: \"register-form-input\",\n              required: true,\n              onChange: e => {\n                setPassword(e.target.value);\n              },\n              error: passwordError,\n              type: \"password\",\n              value: password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: passwordErrorText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: e => {\n            props.closeLoginForm();\n          },\n          color: \"primary\",\n          children: \"Annuler\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: e => {\n            onSubmit();\n          },\n          color: \"primary\",\n          children: \"Connexion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoginPopUp, \"ao+LQfXa11Il6FSmMlqYpcy81HQ=\");\n\n_c = LoginPopUp;\nexport default LoginPopUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPopUp\");","map":{"version":3,"sources":["/Users/nicolas/Documents/Travail/Web Developper/3W Academy/Projet/site/lecaille-front/src/components/loginPopUp.js"],"names":["React","useState","Redirect","loginUser","tokenConfig","config","Dialog","DialogActions","DialogContent","DialogTitle","Button","TextField","FormHelperText","FormControl","LoginPopUp","props","email","setEmail","emailError","setEmailError","emailErrorText","setEmailErrorText","password","setPassword","passwordError","setPasswordError","passwordErrorText","setPasswordErrorText","globalVerify","match","emailRegEx","datas","then","response","data","status","localStorage","setItem","token","name","closeLoginForm","onSubmit","opened","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AAEA,SAAQC,SAAR,QAAwB,aAAxB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAAQC,MAAR,QAAqB,WAArB;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAE1B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACiB,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACmB,cAAD,EAAiBC,iBAAjB,IAAsCpB,QAAQ,CAAC,EAAD,CAApD;AAEA,QAAM,CAACqB,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACuB,aAAD,EAAgBC,gBAAhB,IAAoCxB,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACyB,iBAAD,EAAoBC,oBAApB,IAA4C1B,QAAQ,CAAC,EAAD,CAA1D;;AAEA,QAAM2B,YAAY,GAAG,MAAM;AAEnB,QAAG,CAACZ,KAAJ,EAAU;AACNG,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,MAAAA,iBAAiB,CAAC,8BAAD,CAAjB;AACH,KAHD,MAIK;AACD,UAAG,CAACL,KAAK,CAACa,KAAN,CAAYxB,MAAM,CAACyB,UAAnB,CAAJ,EAAmC;AAC/BX,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,QAAAA,iBAAiB,CAAC,2BAAD,CAAjB;AACH,OAHD,MAIK;AACDF,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,QAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACH;AACJ;;AACD,QAAG,CAACC,QAAJ,EAAa;AACTG,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAE,MAAAA,oBAAoB,CAAC,2BAAD,CAApB;AACH,KAHD,MAIK;AACDF,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAE,MAAAA,oBAAoB,CAAC,EAAD,CAApB;AACH;;AAED,QAAGX,KAAK,CAACa,KAAN,CAAYxB,MAAM,CAACyB,UAAnB,CAAH,EAAkC;AAC9B,UAAIC,KAAK,GAAG;AACRf,QAAAA,KAAK,EAAEA,KADC;AAERM,QAAAA,QAAQ,EAAEA;AAFF,OAAZ;AAKAnB,MAAAA,SAAS,CAAC4B,KAAD,CAAT,CACCC,IADD,CACMC,QAAQ,IAAI;AACd,YAAGA,QAAQ,CAACC,IAAT,CAAcC,MAAd,KAAyB,GAA5B,EAAgC;AAC5Bd,UAAAA,iBAAiB,CAAC,wBAAD,CAAjB;AACAF,UAAAA,aAAa,CAAC,IAAD,CAAb;AACH,SAHD,MAGO;AACHE,UAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAF,UAAAA,aAAa,CAAC,KAAD,CAAb;;AAEA,cAAGc,QAAQ,CAACC,IAAT,CAAcC,MAAd,KAAyB,GAA5B,EAAiC;AAC7BR,YAAAA,oBAAoB,CAAC,wBAAD,CAApB;AACAF,YAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,WAHD,MAIK;AACDW,YAAAA,YAAY,CAACC,OAAb,CAAqBjC,WAAW,CAACkC,KAAZ,CAAkBC,IAAvC,EAA6CN,QAAQ,CAACC,IAAT,CAAcI,KAA3D;AACAvB,YAAAA,KAAK,CAACyB,cAAN;AAEH;AACJ;AACJ,OAnBD;AAoBH;AAER,GArDD;;AAuDA,QAAMC,QAAQ,GAAG,MAAK;AAClBb,IAAAA,YAAY;AACf,GAFD;;AAIA,sBACI;AAAA,2BACA,QAAC,MAAD;AACI,MAAA,IAAI,EAAEb,KAAK,CAAC2B,MADhB;AAEI,MAAA,OAAO,EAAGC,CAAD,IAAO;AAAC5B,QAAAA,KAAK,CAACyB,cAAN;AAAuB,OAF5C;AAAA,8BAII,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI,QAAC,aAAD;AAAA,+BACA;AAAM,UAAA,SAAS,EAAC,qBAAhB;AAAsC,UAAA,YAAY,EAAC,KAAnD;AAAA,kCACI,QAAC,WAAD;AAAa,YAAA,KAAK,MAAlB;AAAA,oCACI,QAAC,SAAD;AAAW,cAAA,OAAO,EAAC,QAAnB;AAA4B,cAAA,KAAK,EAAC,OAAlC;AAA0C,cAAA,KAAK,EAAC,SAAhD;AAA0D,cAAA,SAAS,EAAC,qBAApE;AAA0F,cAAA,QAAQ,MAAlG;AAAmG,cAAA,QAAQ,EAAGG,CAAD,IAAO;AAAC1B,gBAAAA,QAAQ,CAAC0B,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AAAyB,eAA9I;AAAgJ,cAAA,KAAK,EAAE3B,UAAvJ;AAAmK,cAAA,IAAI,EAAC,OAAxK;AAAgL,cAAA,KAAK,EAAEF;AAAvL;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,cAAD;AAAA,wBAAiBI;AAAjB;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAMI,QAAC,WAAD;AAAa,YAAA,KAAK,MAAlB;AAAA,oCACI,QAAC,SAAD;AAAW,cAAA,OAAO,EAAC,QAAnB;AAA4B,cAAA,KAAK,EAAC,cAAlC;AAAiD,cAAA,KAAK,EAAC,SAAvD;AAAiE,cAAA,SAAS,EAAC,qBAA3E;AAAiG,cAAA,QAAQ,MAAzG;AAA0G,cAAA,QAAQ,EAAGuB,CAAD,IAAO;AAACpB,gBAAAA,WAAW,CAACoB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AAA4B,eAAxJ;AAA0J,cAAA,KAAK,EAAErB,aAAjK;AAAgL,cAAA,IAAI,EAAC,UAArL;AAAgM,cAAA,KAAK,EAAEF;AAAvM;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,cAAD;AAAA,wBAAiBI;AAAjB;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cALJ,eAkBI,QAAC,aAAD;AAAA,gCACA,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAGiB,CAAD,IAAO;AAAC5B,YAAAA,KAAK,CAACyB,cAAN;AAAuB,WAAhD;AAAkD,UAAA,KAAK,EAAC,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAIA,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAGG,CAAD,IAAO;AAACF,YAAAA,QAAQ;AAAG,WAApC;AAAsC,UAAA,KAAK,EAAC,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AA+BH,CArGD;;GAAM3B,U;;KAAAA,U;AAuGN,eAAeA,UAAf","sourcesContent":["import React, {useState} from 'react'\nimport {Redirect} from \"react-router-dom\"\n\nimport {loginUser} from \"../api/user\"\n\nimport tokenConfig from \"../tokenConfig\"\nimport {config} from \"../config\"\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst LoginPopUp = (props) => {\n\n    //Définition des variables\n    const [email, setEmail] = useState(\"\")\n    const [emailError, setEmailError] = useState(\"\")\n    const [emailErrorText, setEmailErrorText] = useState(\"\")\n\n    const [password, setPassword] = useState(\"\")\n    const [passwordError, setPasswordError] = useState(false)\n    const [passwordErrorText, setPasswordErrorText] = useState(\"\")\n\n    const globalVerify = () => {\n\n            if(!email){\n                setEmailError(true)\n                setEmailErrorText(\"Adresse email non renseignée\")\n            }\n            else {\n                if(!email.match(config.emailRegEx)){\n                    setEmailError(true)\n                    setEmailErrorText(\"Format d'email non valide\")\n                }\n                else {\n                    setEmailError(false)\n                    setEmailErrorText(\"\")\n                }\n            }\n            if(!password){\n                setPasswordError(true)\n                setPasswordErrorText(\"Mot de passe non reseigné\")\n            }\n            else {\n                setPasswordError(false)\n                setPasswordErrorText(\"\")\n            }\n\n            if(email.match(config.emailRegEx)){\n                let datas = {\n                    email: email,\n                    password: password\n                }    \n                \n                loginUser(datas)\n                .then(response => {\n                    if(response.data.status === 404){\n                        setEmailErrorText(\"Utilisateur inexistant\")\n                        setEmailError(true)\n                    } else {\n                        setEmailErrorText(\"\")\n                        setEmailError(false)\n\n                        if(response.data.status === 401) {\n                            setPasswordErrorText(\"Mot de passe incorrect\")\n                            setPasswordError(true)\n                        }\n                        else {\n                            localStorage.setItem(tokenConfig.token.name, response.data.token)\n                            props.closeLoginForm()\n                            \n                        }\n                    }\n                })\n            }\n            \n    }\n\n    const onSubmit = () =>{\n        globalVerify() \n    }\n\n    return(\n        <div>\n        <Dialog\n            open={props.opened}\n            onClose={(e) => {props.closeLoginForm()}}\n        >\n            <DialogTitle>Se connecter</DialogTitle>\n            <DialogContent>\n            <form className=\"login-register-form\" autoComplete=\"off\">\n                <FormControl error>\n                    <TextField variant=\"filled\" label=\"Email\" color=\"primary\" className=\"register-form-input\" required onChange={(e) => {setEmail(e.target.value)}} error={emailError} type=\"email\" value={email}/>\n                    <FormHelperText>{emailErrorText}</FormHelperText>\n                </FormControl>\n\n                <FormControl error>\n                    <TextField variant=\"filled\" label=\"Mot de passe\" color=\"primary\" className=\"register-form-input\" required onChange={(e) => {setPassword(e.target.value)}} error={passwordError} type=\"password\" value={password}/>\n                    <FormHelperText>{passwordErrorText}</FormHelperText>\n                </FormControl>\n            </form>\n            </DialogContent>\n            <DialogActions>\n            <Button onClick={(e) => {props.closeLoginForm()}} color=\"primary\">\n                Annuler\n            </Button>\n            <Button onClick={(e) => {onSubmit()}} color=\"primary\" >\n                Connexion\n            </Button>\n            </DialogActions>\n        </Dialog>\n        </div>\n    )\n}\n\nexport default LoginPopUp"]},"metadata":{},"sourceType":"module"}