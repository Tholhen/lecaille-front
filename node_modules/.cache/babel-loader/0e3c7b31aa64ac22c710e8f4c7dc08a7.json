{"ast":null,"code":"var _jsxFileName = \"/Users/nicolas/Documents/Travail/Web Developper/3W Academy/Projet/site/lecaille-front/src/components/loginPopUp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { connect } from \"react-redux\";\nimport { connectUser } from \"../actions/user/userAction\";\nimport { loginUser } from \"../api/user\";\nimport tokenConfig from \"../config/tokenConfig\";\nimport { config } from \"../config/config\"; //Imports de la librairie MaterialUI\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport { makeStyles } from \"@material-ui/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginPopUp = props => {\n  _s();\n\n  //Définition des variables\n  const [email, setEmail] = useState(\"\");\n  const [emailError, setEmailError] = useState(false);\n  const [emailErrorText, setEmailErrorText] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(false);\n  const [passwordErrorText, setPasswordErrorText] = useState(\"\"); //Définition du style MaterialUI\n\n  const useStyles = makeStyles(theme => ({\n    margin: {\n      margin: theme.spacing(1),\n      width: \"90%\"\n    }\n  }));\n  const classes = useStyles();\n\n  const globalVerify = () => {\n    if (!email) {\n      setEmailError(true);\n      setEmailErrorText(\"Adresse email non renseignée\");\n    } else {\n      if (!email.match(config.emailRegEx)) {\n        setEmailError(true);\n        setEmailErrorText(\"Format d'email non valide\");\n      } else {\n        setEmailError(false);\n        setEmailErrorText(\"\");\n      }\n    }\n\n    if (!password) {\n      setPasswordError(true);\n      setPasswordErrorText(\"Mot de passe non reseigné\");\n    } else {\n      setPasswordError(false);\n      setPasswordErrorText(\"\");\n    }\n\n    if (email.match(config.emailRegEx)) {\n      let datas = {\n        email: email,\n        password: password\n      };\n      loginUser(datas).then(response => {\n        if (response.data.status === 404) {\n          setEmailErrorText(\"Utilisateur inexistant\");\n          setEmailError(true);\n        } else {\n          setEmailErrorText(\"\");\n          setEmailError(false);\n\n          if (response.data.status === 401) {\n            setPasswordErrorText(\"Mot de passe incorrect\");\n            setPasswordError(true);\n          } else {\n            localStorage.setItem(tokenConfig.token.name, response.data.token);\n            props.connectUser(response.data.user);\n            props.closeLoginForm();\n          }\n        }\n      });\n    }\n  };\n\n  const onSubmit = () => {\n    globalVerify();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: props.opened,\n    onClose: e => {\n      props.closeLoginForm();\n    },\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"Se connecter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"login-register-form\",\n        autoComplete: \"off\",\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          error: true,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            variant: \"filled\",\n            label: \"Email\",\n            color: \"primary\",\n            className: classes.margin,\n            required: true,\n            onChange: e => {\n              setEmail(e.target.value);\n            },\n            error: emailError,\n            type: \"email\",\n            value: email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: emailErrorText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          error: true,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            variant: \"filled\",\n            label: \"Mot de passe\",\n            color: \"primary\",\n            className: classes.margin,\n            required: true,\n            onChange: e => {\n              setPassword(e.target.value);\n            },\n            error: passwordError,\n            type: \"password\",\n            value: password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: passwordErrorText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: e => {\n          props.closeLoginForm();\n        },\n        color: \"primary\",\n        children: \"Annuler\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: e => {\n          onSubmit();\n        },\n        color: \"primary\",\n        children: \"Connexion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 13\n  }, this);\n};\n\n_s(LoginPopUp, \"GdeKkI5OT1lhHU09kaJP+WZH7Ws=\", true);\n\n_c = LoginPopUp;\n\nconst mapStateToProps = store => {\n  return {};\n};\n\nconst mapDispatchToProps = {\n  connectUser\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPopUp);\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPopUp\");","map":{"version":3,"sources":["/Users/nicolas/Documents/Travail/Web Developper/3W Academy/Projet/site/lecaille-front/src/components/loginPopUp.js"],"names":["React","useState","connect","connectUser","loginUser","tokenConfig","config","Dialog","DialogActions","DialogContent","DialogTitle","Button","TextField","FormHelperText","FormControl","makeStyles","LoginPopUp","props","email","setEmail","emailError","setEmailError","emailErrorText","setEmailErrorText","password","setPassword","passwordError","setPasswordError","passwordErrorText","setPasswordErrorText","useStyles","theme","margin","spacing","width","classes","globalVerify","match","emailRegEx","datas","then","response","data","status","localStorage","setItem","token","name","user","closeLoginForm","onSubmit","opened","e","target","value","mapStateToProps","store","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport {connect} from \"react-redux\"\nimport {connectUser} from \"../actions/user/userAction\"\n\nimport {loginUser} from \"../api/user\"\n\nimport tokenConfig from \"../config/tokenConfig\"\nimport {config} from \"../config/config\"\n\n//Imports de la librairie MaterialUI\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport {makeStyles } from \"@material-ui/styles\";\n\nconst LoginPopUp = (props) => {\n\n    //Définition des variables\n    const [email, setEmail] = useState(\"\")\n    const [emailError, setEmailError] = useState(false)\n    const [emailErrorText, setEmailErrorText] = useState(\"\")\n\n    const [password, setPassword] = useState(\"\")\n    const [passwordError, setPasswordError] = useState(false)\n    const [passwordErrorText, setPasswordErrorText] = useState(\"\")\n\n    //Définition du style MaterialUI\n    const useStyles = makeStyles((theme) => ({\n        margin: {\n            margin: theme.spacing(1),\n            width: \"90%\"\n        },\n    }));\n\n    const classes = useStyles();\n    \n    const globalVerify = () => {\n\n            if(!email){\n                setEmailError(true)\n                setEmailErrorText(\"Adresse email non renseignée\")\n            }\n            else {\n                if(!email.match(config.emailRegEx)){\n                    setEmailError(true)\n                    setEmailErrorText(\"Format d'email non valide\")\n                }\n                else {\n                    setEmailError(false)\n                    setEmailErrorText(\"\")\n                }\n            }\n            if(!password){\n                setPasswordError(true)\n                setPasswordErrorText(\"Mot de passe non reseigné\")\n            }\n            else {\n                setPasswordError(false)\n                setPasswordErrorText(\"\")\n            }\n\n            if(email.match(config.emailRegEx)){\n                let datas = {\n                    email: email,\n                    password: password\n                }    \n                \n                loginUser(datas)\n                .then(response => {\n                    if(response.data.status === 404){\n                        setEmailErrorText(\"Utilisateur inexistant\")\n                        setEmailError(true)\n                    } else {\n                        setEmailErrorText(\"\")\n                        setEmailError(false)\n\n                        if(response.data.status === 401) {\n                            setPasswordErrorText(\"Mot de passe incorrect\")\n                            setPasswordError(true)\n                        }\n                        else {\n                            localStorage.setItem(tokenConfig.token.name, response.data.token)\n                            props.connectUser(response.data.user)\n                            props.closeLoginForm()\n                        }\n                    }\n                })\n            }\n            \n    }\n\n    const onSubmit = () =>{\n        globalVerify() \n    }\n\n    return(\n            <Dialog\n                open={props.opened}\n                onClose={(e) => {props.closeLoginForm()}}\n            >\n                <DialogTitle>Se connecter</DialogTitle>\n                    <DialogContent>\n                    <form className=\"login-register-form\" autoComplete=\"off\">\n                        <FormControl error>\n                            <TextField variant=\"filled\" label=\"Email\" color=\"primary\" className={classes.margin} required onChange={(e) => {setEmail(e.target.value)}} error={emailError} type=\"email\" value={email}/>\n                            <FormHelperText>{emailErrorText}</FormHelperText>\n                        </FormControl>\n\n                        <FormControl error>\n                            <TextField variant=\"filled\" label=\"Mot de passe\" color=\"primary\" className={classes.margin} required onChange={(e) => {setPassword(e.target.value)}} error={passwordError} type=\"password\" value={password}/>\n                            <FormHelperText>{passwordErrorText}</FormHelperText>\n                        </FormControl>\n                    </form>\n                    </DialogContent>\n                <DialogActions>\n                <Button onClick={(e) => {props.closeLoginForm()}} color=\"primary\">\n                    Annuler\n                </Button>\n                <Button onClick={(e) => {onSubmit()}} color=\"primary\" >\n                    Connexion\n                </Button>\n                </DialogActions>\n            </Dialog>\n    )\n}\n\nconst mapStateToProps = (store) => {\n    return {\n        \n    }\n}\n\nconst mapDispatchToProps = {\n    connectUser\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(LoginPopUp)"]},"metadata":{},"sourceType":"module"}